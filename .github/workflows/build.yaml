name: build

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'gradle.properties'
      - 'LICENSE'
      - 'README.adoc'
      - 'docs/**'
    tags-ignore:
      - 'v*'
  workflow_dispatch:

jobs:

  version:
    name: check version
    runs-on: ubuntu-latest
    outputs:
      BUILD_VERSION: ${{ env.BUILD_VERSION }}

    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@3599d8b96621e7e741ec2ae1cee1185acd651aed

      - name: checkout
        uses: actions/checkout@v4

      - name: install dasel
        run: |
          brew install dasel
          cat $GITHUB_ENV

      - name: extract version
        run: |
          version=`dasel -r toml -f gradle/libs.versions.toml versions.openapiparser`
          echo "BUILD_VERSION=${version#projectVersion=}" >> $GITHUB_ENV
          cat $GITHUB_ENV

  test:
    name: test

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: set up jdk
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: |
          11
          17

    - name: set up gradle
      uses: gradle/gradle-build-action@v2.11.0

    - name: run tests
      run: |
        ./gradlew check --warning-mode all

    - name: archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test results
        path: '*/build/reports'

  publish:
    if: contains(needs.version.outputs.BUILD_VERSION, 'SNAPSHOT') && github.actor == 'hauner'
    needs: [version, test]
    name: publish snapshot

    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: set up jdk
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: |
          11
          17

    - name: set up gradle
      uses: gradle/gradle-build-action@v2.11.0

    - name: publish snapshot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SIGN_KEY: ${{ secrets.SIGN_KEY }}
        SIGN_PWD: ${{ secrets.SIGN_PWD }}
        PUBLISH_USER: ${{ secrets.PUBLISH_USER }}
        PUBLISH_KEY: ${{ secrets.PUBLISH_KEY }}
      run: |
        ./gradlew publishToSonatype

  sonar:
    needs: [test]
    name: sonar

    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true

    - name: cache sonar
      uses: actions/cache@v3
      with:
        path: |
          ~/.sonar/cache
        key: sonar-${{ runner.os }}
        restore-keys: |
          sonar-${{ runner.os }}

    - name: set up jdk
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: |
          11
          17

    - name: set up gradle
      uses: gradle/gradle-build-action@v2.11.0

    - name: run tests
      run: |
        ./gradlew check --warning-mode all

    - name: run sonar validator
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./gradlew -Dorg.gradle.jvmargs="-Xmx1024m -XX:MaxMetaspaceSize=400m" :json-schema-validator:sonar --stacktrace

    - name: run sonar parser
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./gradlew -Dorg.gradle.jvmargs="-Xmx1024m -XX:MaxMetaspaceSize=400m" :openapi-parser:sonar --stacktrace

    - name: archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ runner.os }}
        path: '*/build/reports'
